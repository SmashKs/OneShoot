#version: 2
#
#jobs:
#  build:
#    working_directory: ~/workspace
#    environment:
#          JVM_OPTS: -Xms1024m -Xmx4096m -XX:MaxMetaspaceSize=1536m
#          ANDROID_API_LEVEL: 27
#          EMULATOR_API_LEVEL: 22
#          ANDROID_ABI: armeabi-v7a
#          ANDROID_TAG: google_apis
#          ANDROID_TARGET: android-$ANDROID_API_LEVEL
#          ADB_INSTALL_TIMEOUT: 20 # minutes (2 minutes by default)
#    docker:
#      - image: circleci/android:api-28-alpha
#    environment:
#      JVM_OPTS: -Xmx4096m
#    steps:
#      - run:
#          name: Setup emulator
#          command: sdkmanager "system-images;android-22;default;armeabi-v7a" && echo "no" | avdmanager create avd -n test -k "system-images;android-22;default;armeabi-v7a"
#      - run:
#          name: Launch emulator
#          command: export LD_LIBRARY_PATH=${ANDROID_HOME}/emulator/lib64:${ANDROID_HOME}/emulator/lib64/qt/lib && emulator64-arm -avd test -noaudio -no-boot-anim -no-window -accel on
#          background: true
#
#      - checkout
#      - restore_cache:
#          key: jars-{{ checksum "build.gradle" }}-{{ checksum  "presentation/build.gradle" }}
#      - run:
#          name: Download Dependencies
#          command: ./gradlew androidDependencies
#      - save_cache:
#          paths:
#            - ~/.gradlew
#          key: jars-{{ checksum "build.gradle" }}-{{ checksum  "presentation/build.gradle" }}
## Firebase online test
##      - run:
##          name: Assemble APKs
##          command: ./gradlew assembleAndroidTest assemble
##      - run:
##          name: Dump Google Cloud Credentials to file
##          command: echo ${GOOGLE_AUTH} > ${HOME}/gcp-key.json
##      - run: gcloud auth activate-service-account --key-file ${HOME}/gcp-key.json
##      - run: gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
##      - run:
##          name: Configure environment
##          command: |
##            echo 'export APK_PATH=`find . -path "*.apk" ! -path "*unaligned.apk" ! -path "*Test*.apk" -print -quit`' >> $BASH_ENV
##            echo 'export TEST_APK_PATH=`find "." "-path" "*Test*.apk" -print -quit`' >> $BASH_ENV
##      - run:
##          name: Run UI Tests
##          command: gcloud firebase test android run --type instrumentation --app ${APK_PATH} --test ${TEST_APK_PATH} --device model=Nexus6P,version=27,locale=en,orientation=portrait --timeout 30m
##          no_output_timeout: 30m
#
## Test
##      - run:
##          name: Run Tests
##          command: ./gradlew lint test
##          environment:
##            TERM: dumb
#      - run:
#          name: Generate JaCoCo report
#          command: ./gradlew jacocoTestReport
#          environment:
#            TERM: dumb
#      - run:
#          name: Upload coverage report to CodeCov
#          command: bash <(curl -s https://codecov.io/bash)
#          environment:
#            TERM: dumb
#      - store_artifacts:
#          path: app/build/reports
#          destination: reports
#          environment:
#            TERM: dumb
#      - store_test_results:
#          path: app/build/test-results
#          environment:
#            TERM: dumb
#


version: 2
references:
  ## Cache
  cache_key: &cache_key
    key: cache-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}-{{ checksum "build.gradle" }}-{{ checksum "presentation/build.gradle" }}
  restore_cache: &restore_cache
    restore_cache:
      <<: *cache_key
  save_cache: &save_cache
    save_cache:
      <<: *cache_key
      paths:
        - ~/.gradle
        - ~/.m2

 ## Workspace
  workspace: &workspace
    ~/workspace
  attach_debug_workspace: &attach_debug_workspace
    attach_workspace:
      at: *workspace
  persist_debug_workspace: &persist_debug_workspace
    persist_to_workspace:
      root: *workspace
      paths:
        - presentation/build/intermediates
        - presentation/build/outputs/androidTest-results
        - presentation/build/outputs/apk
        - presentation/build/outputs/code-coverage
        - presentation/build/test-results
  attach_firebase_workspace: &attach_firebase_workspace
    attach_workspace:
      at: *workspace
  persist_firebase_workspace: &persist_firebase_workspace
    persist_to_workspace:
      root: *workspace
      paths:
        - firebase

  ## Docker image configurations
  android_config: &android_config
    working_directory: *workspace
    docker:
      - image: circleci/android:api-27-alpha
    environment:
      TERM: dumb
      _JAVA_OPTIONS: "-Xmx2048m -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap"
      GRADLE_OPTS: '-Dorg.gradle.jvmargs="-Xmx2048m"'
  gcloud_config: &gcloud_config
    working_directory: *workspace
    docker:
      - image: google/cloud-sdk:latest
    environment:
      TERM: dumb

  # Google Services
  export_gservices_key: &export_gservices_key
    run:
      name: Export Google Services key environment variable
      command: echo 'export GOOGLE_SERVICES_KEY="$GOOGLE_SERVICES_KEY"' >> $BASH_ENV
  decode_gservices_key: &decode_gservices_key
    run:
      name: Decode Google Services key
      command: echo $GOOGLE_SERVICES_KEY | base64 -di > presentation/google-services.json

  # Google Cloud Service
  export_gcloud_key: &export_gcloud_key
    run:
      name: Export Google Cloud Service key environment variable
      command: echo 'export GCLOUD_SERVICE_KEY="$GCLOUD_SERVICE_KEY"' >> $BASH_ENV
  decode_gcloud_key: &decode_gcloud_key
    run:
      name: Decode Google Cloud credentials
      command: echo $GCLOUD_SERVICE_KEY | base64 -di > ${HOME}/client-secret.json

jobs:
  ## Build debug APK and instrumented test APK
  build_debug:
    <<: *android_config
    steps:
      - checkout
      - *restore_cache
      - run:
          name: Download dependencies
          command: ./gradlew androidDependencies
      - *save_cache
      - *export_gservices_key
      - *decode_gservices_key
      - run:
          name: Gradle build (debug)
          command: ./gradlew -PciBuild=true :presentation:assembleDebug :presentation:assembleAndroidTest
      - *persist_debug_workspace
      - store_artifacts:
          path: presentation/build/outputs/apk/
          destination: /apk/

  ## Check code quality
  check_quality:
    <<: *android_config
    steps:
      - checkout
      - *restore_cache
      - run:
          name: Download dependencies
          command: ./gradlew androidDependencies
      - *save_cache
      - *export_gservices_key
      - *decode_gservices_key
      - *persist_debug_workspace
      - store_artifacts:
          path: presentation/build/reports/
          destination: /reports/

  ## Run unit tests
  test_unit:
    <<: *android_config
    steps:
      - checkout
      - *restore_cache
      - run:
          name: Download dependencies
          command: ./gradlew androidDependencies
      - *save_cache
      - *export_gservices_key
      - *decode_gservices_key
      - run:
          name: Run unit tests
          command: ./gradlew -PciBuild=true :presentation:testDebugUnitTest
      - *persist_debug_workspace
      - store_artifacts:
          path: presentation/build/reports/
          destination: /reports/
      - store_test_results:
          path: presentation/build/test-results/
          destination: /test-results/

  ## Run instrumented tests
  test_instrumented:
    <<: *gcloud_config
    steps:
      - *attach_debug_workspace
      - *export_gcloud_key
      - *decode_gcloud_key
      - run:
          name: Set Google Cloud target project
          command: gcloud config set project newspaper-84169
      - run:
          name: Authenticate with Google Cloud
          command: gcloud auth activate-service-account firebase-adminsdk-p9qvk@newspaper-84169.iam.gserviceaccount.com --key-file ${HOME}/client-secret.json
      - run:
          name: Run instrumented test on Firebase Test Lab
          command: gcloud firebase test android run --type instrumentation --app presentation/build/outputs/apk/debug/presentation-debug.apk --test presentation/build/outputs/apk/androidTest/debug/presentation-debug-androidTest.apk --device model=sailfish,version=26,locale=en_US,orientation=portrait --environment-variables coverage=true,coverageFile=/sdcard/tmp/code-coverage/connected/coverage.ec --directories-to-pull=/sdcard/tmp --timeout 20m
      - run:
          name: Create directory to store test results
          command: mkdir firebase
      - run:
          name: Download instrumented test results from Firebase Test Lab
          command: gsutil -m cp -r -U "`gsutil ls gs://test-lab-3udbiqpdyp0d0-miwcp7d69v80m | tail -1`*" /root/workspace/firebase/
      - *persist_firebase_workspace
      - store_artifacts:
          path: firebase/
          destination: /firebase/

  ## Submit JaCoCo coverage report
  report_coverage:
    <<: *android_config
    steps:
      - checkout
      - *restore_cache
      - run:
          name: Download dependencies
          command: ./gradlew androidDependencies
      - *attach_debug_workspace
      - *attach_firebase_workspace
      - run:
          name: Move Firebase coverage report
          command: mkdir -p presentation/build/outputs/code-coverage/connected && cp firebase/sailfish-26-en_US-portrait/artifacts/coverage.ec presentation/build/outputs/code-coverage/connected/coverage.ec
      - *export_gservices_key
      - *decode_gservices_key
      - run:
          name: Generate JaCoCo report
          command: ./gradlew -PciBuild=true :presentation:jacocoTestReport
      - run:
          name: Upload coverage report to Codacy
          command: ./gradlew -PciBuild=true uploadCoverageToCodacy
      - run:
          name: Upload coverage report to CodeCov
          command: bash <(curl -s https://codecov.io/bash)
      - store_artifacts:
          path: presentation/build/reports/
          destination: /reports/

workflows:
  version: 2
  workflow:
    jobs:
      - build_debug
      - test_unit:
          requires:
            - build_debug
      - test_instrumented:
          requires:
            - build_debug
      - report_coverage:
          requires:
            - test_unit
            - test_instrumented
